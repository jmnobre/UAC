#!/bin/bash

declare SCRIPTDIR="$0"

if [[ "$SCRIPTDIR" =~ / ]]; then
	if [[ ! "$SCRIPTDIR" =~ ^/ ]]; then SCRIPTDIR="$(cd "$SCRIPTDIR"; pwd)"; fi
else
	SCRIPTDIR="$PWD"
fi

SCRIPT="${0##*/}"
TAG="${SCRIPT%.*}"
ID="$(date +%s)-$RANDOM"

# usage: log <message>
# logs a message in the standard log file
function log( ) {
	logger -t "$TAG" "(id: $ID) $1"
}

log "UAC Start"

# act only during the start of the session
if [[ "$PAM_TYPE" != 'open_session' ]]; then
	log "PAM Type is '$PAM_TYPE' -- leaving without action"
	exit 0
fi

if [[ -z "$1" ]]; then 
	log "no access database provided -- leaving without action"
	exit 0; 
fi

if [[ -z "$PAM_USER" ]]; then 
	log "no PAM user defined -- aborting login"
	exit 1
fi

log "PAM_USER: $PAM_USER"

if [[ -z "$PAM_RHOST" ]]; then
	log "no PAM remote host defined for user $PAM_USER -- aborting login"
	exit 1
fi

log "PAM_RHOST: $PAM_RHOST"

# get remote host name
PAM_RHOSTFQDN="$(nslookup "$PAM_RHOST" | awk '/\sname\s=\s/{ print $NF }' | sed -r 's/\.\s*$//')"

log "PAM_RHOSTFQDN: $PAM_RHOSTFQDN"

if [[ -z "$PAM_RHOSTFQDN" ]]; then
	log "can't find remote host FQDN: $PAM_RHOST for user $PAM_USER -- continuing PAM process"
fi

while [[ ! -z "$1" ]]; do
	if [[ ! -d "$1" ]]; then 
		log "provided path is not a directory: '$1' -- allowing access"
		exit 0
	elif [[ ! -r "$1" ]]; then 
		log "provided path is not readeable: '$1' -- allowing access"
		exit 0
	elif [[ ! -x "$1" ]]; then 
		log "provided path is not browsable: '$1' -- allowing access"
		exit 0
	fi

	log "using '${1##*/}' database on '$1'"

	pushd "$1" >/dev/null

	for file in `ls *.uac`; do

		if [[ ! -r "$file" ]]; then 
			log "database file '$file' not readeable -- skipping file"
			continue
		fi

		# check db consistency
		if [[ "$(head -n -1 "$file" | md5sum | awk '{print $1}')" != "$(tail -n 1 "$file")" ]]; then
			log "access database check consistency failure for database '$1/$file' -- skipping file"
			continue
		fi

		log "checking '$1/$file' database"

		# process PAM database
		declare mrule

		mrule="$(cat "$file" |
					awk -v USER="$PAM_USER" -v IP="$PAM_RHOST" -v HOST="$PAM_RHOSTFQDN" -f <(
						cat - << __EOS

					BEGIN {
						split( IP, parts, "." )
						IP=0
						for(i=1;i<=4;i++)IP=256*IP+parts[i]
						
						ST=0
					}

					(\$1=="U") {
						if( ST==1 )next;
						ST=match( USER, "^("\$2")\$" )?1:0
						next
					}

					(ST==0) { next }
					
					{ ST=2}
					
					(\$1=="A") {
						if( \$2 == IP ) exit 0
						ST=1
						next
					}
					
					(\$1=="R") {
						if( (\$2 <= IP) && (\$3 >= IP) )exit 0
						ST=1
						next
					}
					
					(\$1=="N") {
						if( and(IP,\$3)==\$2 )exit 0
						ST=1
						next
					}
					
					(\$1=="D") {
						if( match( HOST, "^("\$2")\$" ) )exit 0
						ST=1
						next
					}
					
					ENDFILE {
						FAIL=1
					}
					
					END {
						print FAIL?-1:NR
						exit ( ST==2 )?((\$NF=="A")?0:1):1
					}
						
__EOS
				)

				exit $?)"

		declare RC=$?

		if [[ $mrule -ne -1 ]]; then
			if [[ $RC -eq 0 ]]; then
				log "Access granted by rule $1/$file:$mrule"
			else 
				log "Access denied by rule $1/$file:$mrule"
			fi

			exit $RC
		fi
		
	done
	
	popd >/dev/null
	shift
done

log "No matching rule found -- denying access"
exit 1

